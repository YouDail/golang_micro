// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: class.proto

package class

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ClassInfo service

type ClassInfoService interface {
	//    rpc GetClassInfo(ClassIdRequest) returns (ClassIdResponse) {}
	GetClassInfoNew(ctx context.Context, in *ClassIdRequest, opts ...client.CallOption) (*ClassIdNewResponse, error)
	GetClassName(ctx context.Context, in *ClassIdRequest, opts ...client.CallOption) (*ClassNameResponse, error)
}

type classInfoService struct {
	c    client.Client
	name string
}

func NewClassInfoService(name string, c client.Client) ClassInfoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "classinfo"
	}
	return &classInfoService{
		c:    c,
		name: name,
	}
}

func (c *classInfoService) GetClassInfoNew(ctx context.Context, in *ClassIdRequest, opts ...client.CallOption) (*ClassIdNewResponse, error) {
	req := c.c.NewRequest(c.name, "ClassInfo.GetClassInfoNew", in)
	out := new(ClassIdNewResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classInfoService) GetClassName(ctx context.Context, in *ClassIdRequest, opts ...client.CallOption) (*ClassNameResponse, error) {
	req := c.c.NewRequest(c.name, "ClassInfo.GetClassName", in)
	out := new(ClassNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClassInfo service

type ClassInfoHandler interface {
	//    rpc GetClassInfo(ClassIdRequest) returns (ClassIdResponse) {}
	GetClassInfoNew(context.Context, *ClassIdRequest, *ClassIdNewResponse) error
	GetClassName(context.Context, *ClassIdRequest, *ClassNameResponse) error
}

func RegisterClassInfoHandler(s server.Server, hdlr ClassInfoHandler, opts ...server.HandlerOption) error {
	type classInfo interface {
		GetClassInfoNew(ctx context.Context, in *ClassIdRequest, out *ClassIdNewResponse) error
		GetClassName(ctx context.Context, in *ClassIdRequest, out *ClassNameResponse) error
	}
	type ClassInfo struct {
		classInfo
	}
	h := &classInfoHandler{hdlr}
	return s.Handle(s.NewHandler(&ClassInfo{h}, opts...))
}

type classInfoHandler struct {
	ClassInfoHandler
}

func (h *classInfoHandler) GetClassInfoNew(ctx context.Context, in *ClassIdRequest, out *ClassIdNewResponse) error {
	return h.ClassInfoHandler.GetClassInfoNew(ctx, in, out)
}

func (h *classInfoHandler) GetClassName(ctx context.Context, in *ClassIdRequest, out *ClassNameResponse) error {
	return h.ClassInfoHandler.GetClassName(ctx, in, out)
}
